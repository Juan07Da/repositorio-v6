"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
from pathlib import Path
import os
from os import getenv  # Importa la función getenv para obtener variables de entorno del sistema.
from dotenv import load_dotenv  # Importa la función load_dotenv para cargar variables de entorno desde un archivo .env.
from urllib.parse import urlparse  # Importa urlparse para analizar la URL de la base de datos.

from pathlib import Path
from django.urls import reverse_lazy

# Cargar las variables de entorno
load_dotenv() 

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-g#x@^f5)nqt6765-n1how!r@i*9x)$2q)em5o2ha17jc^ckz^2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

# CSRF_TRUSTED_ORIGINS = ['https://*']
CSRF_TRUSTED_ORIGINS = [os.getenv("DOMINIO")]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
    'django.contrib.sites',  # Necesario para allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',   # Agregar esta línea
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Obtener la URL desde las variables de entorno
database_url = os.getenv("DATABASE_URL")  

if not database_url:  
    # Si la variable DATABASE_URL no está configurada, lanza una excepción para informar al desarrollador.
    raise ValueError("DATABASE_URL no está configurada en el archivo .env")

# Analizar la URL de la base de datos para obtener sus componentes
tmpPostgres = urlparse(database_url)  

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  
        # Define el motor de base de datos que usará Django, en este caso PostgreSQL.

        'NAME': tmpPostgres.path.lstrip('/').decode('utf-8') if isinstance(tmpPostgres.path, bytes) else tmpPostgres.path.lstrip('/'),
        # Obtiene el nombre de la base de datos eliminando la barra inicial (/) de `tmpPostgres.path`.
        # Si `tmpPostgres.path` es de tipo bytes, lo convierte a una cadena de texto usando `.decode('utf-8')`.

        'USER': tmpPostgres.username,  
        # El usuario de la base de datos, extraído de la URL.

        'PASSWORD': tmpPostgres.password,  
        # La contraseña asociada al usuario, extraída de la URL.

        'HOST': tmpPostgres.hostname,  
        # El nombre del host donde está alojada la base de datos, extraído de la URL.

        'PORT': tmpPostgres.port or 5432,  
        # El puerto en el que la base de datos escucha conexiones.
        # Si no se especifica un puerto en la URL, usa el puerto predeterminado para PostgreSQL (5432).
        
        'OPTIONS': {
            'sslmode': 'require',
        },
        # Sirve para habilitar y forzar el uso de una conexión segura (SSL/TLS) entre tu aplicación Django y 
        # tu base de datos PostgreSQL. Esto asegura que todos los datos que viajan entre tu servidor y 
        # la base de datos estén encriptados, protegiéndolos contra posibles intercepciones o ataques.

    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuracion correos del proyecto 
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True 
EMAIL_USE_SSL = False
EMAIL_HOST_USER = os.getenv("CORREO")  # Reemplaza con tu correo real
EMAIL_HOST_PASSWORD =  os.getenv("CONTRASENIA")  # Pega aquí la contraseña de aplicación SIN espacios

# Configuracion acceso a api de google inicio de sesion
SITE_ID = 1
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online'},
    }
}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.getenv("ID"),
            'secret': os.getenv("SECRETO"),
            'key': ''
        }
    }
}

SOCIALACCOUNT_LOGIN_ON_GET = True  # Evita la página intermedia sin estilos

LOGIN_REDIRECT_URL = reverse_lazy('home')
ACCOUNT_LOGOUT_REDIRECT_URL = 'login'
ACCOUNT_SIGNUP_FIELDS = ["email*", "username*", "password1*", "password2*"]
ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_EMAIL_VERIFICATION = "mandatory"

